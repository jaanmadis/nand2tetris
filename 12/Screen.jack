// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

	static boolean color;
	static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384;
		/**
		16384 - screen start
		24576 - kbd start

		Screen is:
		0..511 - line is 32 words of 16 bits (16 x 32)
		0..255 - 256 lines (256 * 32 = 8192 = 24576 - 16384)
		*/
		let color = true;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int addr;
		let addr = 16384;
		while (addr < 24576) {
			do Memory.poke(addr, 0);
			let addr = addr + 1;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, mask, value;
		let address = (32 * y) + (x / 16) + 16384;
		let value = Memory.peek(address);
		let mask = twoToThe[Screen.mod(x, 16)];
		if (color) {
			let value = value | mask;
		}
		else {
			let mask = ~mask;
			let value = value & mask;
		}
		do Memory.poke(address, value);
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		if ((x1 = x2) & (y1 = y2)) {
			do Screen.drawPixel(x1, y2);
			return;
		}
		if (y1 = y2) {
			do Screen.drawLineH(Math.min(x1, x2), y1, Math.max(x1, x2));
			return;
		}
		if (x1 = x2) {
			do Screen.drawLineV(x1, Math.min(y1, y2), Math.max(y1, y2));
			return;
		}
		if (x1 < x2) {
			do Screen.drawLineD(x1, y1, x2, y2);
			return;
		}
		if (x1 > x2) {
			do Screen.drawLineD(x2, y2, x1, y1);
			return;
		}
		return;
	}

	function int drawShortLine(int x, int y, int bound) {
		var int address, value, mask;
		let address = (32 * y) + (x / 16) + 16384;
		let value = Memory.peek(address);
		let mask = 0;
		while (~(x > bound)) {
			let mask = mask + twoToThe[Screen.mod(x, 16)];
			let x = x + 1;
		}
		if (color) {
			let value = value | mask;
		}
		else {
			let mask = ~mask;
			let value = value & mask;
		}
		do Memory.poke(address, value);
		return x;
	}
	
    function void drawLineH(int x1, int y, int x2) {
		var int address, value, x, lowBound, highBound;
		let lowBound = Math.min(x2, (x1 + 16) - Screen.mod(x1 + 16, 16) - 1);
		let highBound = x2 - Screen.mod(x2, 16) - 1;
		let x = Screen.drawShortLine(x1, y, lowBound);
		if (lowBound < highBound) {
			while (~(x > highBound)) {
				let address = (32 * y) + (x / 16) + 16384;
				if (color) {
					let value = -1;
				} 
				else {
					let value = 0;
				}
				do Memory.poke(address, value);
				let x = x + 16;
			}
		}
		do Screen.drawShortLine(x, y, x2);
		return;
	}
	
    function void drawLineV(int x, int y1, int y2) {
		var int b;
		let b = y1;
		while (~(b > y2)) {
			do Screen.drawPixel(x, b);
			let b = b + 1;
		}
		return;
	}

    function void drawLineD(int x1, int y1, int x2, int y2) {
		var lint a, b, diff, x, y, dx, dy;
		var boolean rise;
		let x = x1;
		let y = y1;
		let dx = x2 - x1;
		let dy = y2 - y1;
		let a = 0;
		let b = 0;
		let diff = a * dy - b * dx;
		let rise = dy < 0;
		while ((~rise & ~(a > dx) & ~(b > dy)) | (rise & ~(a > dx) & ~(b < dy))) {
			do Screen.drawPixel(x + a, y + b);
			if (diff < 0) {
				let a = a + 1;
				if (rise) {
					let diff = diff - dy;
				}
				else {
					let diff = diff + dy;
				}
			} else {
				if (rise) {
					let b = b - 1;
				}
				else {
					let b = b + 1;
				}
				let diff = diff - dx;
			}
		}
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int a, b;
		let a = Math.min(y1, y2);
		let b = Math.max(y1, y2);
		while (~(a > b)) {
			do Screen.drawLineH(Math.min(x1, x2), a, Math.max(x1, x2));
			let a = a + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dx, dy, rr;
		if (r > 181) {
			do Sys.halt();
			return;
		}
		let dy = -r;
		let rr = r * r;
		while (~(dy > r)) {
			let dx = Math.sqrt(rr - (dy * dy));
			do Screen.drawLineH(x - dx, y + dy, x + dx);
			let dy = dy + 1;
		}
		return;
    }
	
	function int mod(int x, int d) {
		while ((x > d) | (x = d)) {
			let x = x - d;
		}
		return x;
	}
}
