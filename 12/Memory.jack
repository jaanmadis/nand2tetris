// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static Array ram;
	static int freeList;
	
    /** Initializes the class. */
    function void init() {
		/**
		Jack is weakly typed, 
		so this would allow complete access to full ram.
		0 is the base address of this array.
		*/
		let ram = 0;
		
		/**
		2048 - heap start
		16384 - i/o start
		*/
		let freeList = 2048;
		let ram[freeList] = 0;
		let ram[freeList + 1] = 16384 - freeList - 2;
		
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int block, ptr;
		let ptr = freeList;
		while (ptr > 0) {
			if (~(ram[ptr + 1] - (size + 2) < 0)) {
				let ram[ptr + 1] = ram[ptr + 1] - (size + 2);
				let block = ptr + 2 + ram[ptr + 1] + 2;
				let ram[block - 2] = 0;
				let ram[block - 1] = size;
				return block;
			}
			let ptr = ram[ptr];
		}
		do Sys.error(0);
		return 0;
    }
	
    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
		let ram[obj - 2] = freeList;
		let freeList = obj - 2;
		return;
    }    
}
