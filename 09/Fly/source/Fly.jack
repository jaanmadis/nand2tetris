/**
Fly represents the ship that the user controls.
min/maxBoundary could be refactored away from this class into Game class maybe.
*/
class Fly {
	field Array sprite;
	field int scr;
	field int spriteSize;
	field int orientation;
	field int maxSpeed;
	field int maxBoundaryX;
	field int maxBoundaryY;
	field int minBoundaryX;
	field int minBoundaryY;
	field int vx;
	field int vy;
	field int x;
	field int y;
	field boolean exited;
	field boolean stopped;

/**
Constructor
*/	

	constructor Fly new() {
		
		// Current sprite. There are 8 different ones.
		let spriteSize = 16;
		let sprite = Array.new(spriteSize);
		let orientation = 2;

		let maxSpeed = 5;
		let maxBoundaryX = 508;
		let maxBoundaryY = 240;
		let minBoundaryX = 2;
		let minBoundaryY = 2;
		
		// Velocity.
		let vx = 0;
		let vy = 0;
		
		// Coordinates.
		let x = minBoundaryX;
		let y = minBoundaryY;
		
		// Pointer to screen memory.
		let scr = 16384;
		
		// Fly exited landscape.
		let exited = false;
		
		// Fly was stopped by ball.
		let stopped = false;
		
		do loadSprite();
		do draw();
		
		return this;
	}
	
/**
Destructor
*/	

    method void dispose() {
        do sprite.dispose();
		do Memory.deAlloc(this);
        return;
    }
	
/**
Fly has 8 different possible orientations: north, northeast, east, southeast, south, southwest, west, nothwest.
Each of these sprite arrays were generated by Bitmap Editor (/projects/09/BitmapEditor/BitmapEditor.html)
IDC Herzliya / Efi Arazi School of Computer Science / Digital Systems Construction, Spring 2011 / Project 09 / Golan Parashi
*/	

    method void loadSpriteNorth() {
		let sprite[0] = 0;
		let sprite[1] = 1056;
		let sprite[2] = 1632;
		let sprite[3] = 2016;
		let sprite[4] = 2016;
		let sprite[5] = 1632;
		let sprite[6] = 1632;
		let sprite[7] = 18018;
		let sprite[8] = 18402;
		let sprite[9] = 32766;
		let sprite[10] = 32382;
		let sprite[11] = 32382;
		let sprite[12] = 7800;
		let sprite[13] = 2016;
		let sprite[14] = 384;
		let sprite[15] = 0;
        return;
    }

    method void loadSpriteEast() {
		let sprite[0] = 0;
		let sprite[1] = 496;
		let sprite[2] = 112;
		let sprite[3] = 120;
		let sprite[4] = 120;
		let sprite[5] = 32764;
		let sprite[6] = 16380;
		let sprite[7] = 6342;
		let sprite[8] = 6342;
		let sprite[9] = 16380;
		let sprite[10] = 32764;
		let sprite[11] = 120;
		let sprite[12] = 120;
		let sprite[13] = 112;
		let sprite[14] = 496;
		let sprite[15] = 0;
        return;
    }

    method void loadSpriteSouth() {
		let sprite[0] = 0;
		let sprite[1] = 384;
		let sprite[2] = 2016;
		let sprite[3] = 7800;
		let sprite[4] = 32382;
		let sprite[5] = 32382;
		let sprite[6] = 32766;
		let sprite[7] = 18402;
		let sprite[8] = 18018;
		let sprite[9] = 1632;
		let sprite[10] = 1632;
		let sprite[11] = 2016;
		let sprite[12] = 2016;
		let sprite[13] = 1632;
		let sprite[14] = 1056;
		let sprite[15] = 0;
        return;
    }

    method void loadSpriteWest() {
		let sprite[0] = 0;
		let sprite[1] = 3968;
		let sprite[2] = 3584;
		let sprite[3] = 7680;
		let sprite[4] = 7680;
		let sprite[5] = 16382;
		let sprite[6] = 16380;
		let sprite[7] = 25368;
		let sprite[8] = 25368;
		let sprite[9] = 16380;
		let sprite[10] = 16382;
		let sprite[11] = 7680;
		let sprite[12] = 7680;
		let sprite[13] = 3584;
		let sprite[14] = 3968;
		let sprite[15] = 0;
        return;
    }
	
    method void loadSpriteNorthEast() {
		let sprite[0] = 0;
		let sprite[1] = 3088;
		let sprite[2] = 3592;
		let sprite[3] = 3844;
		let sprite[4] = 31628;
		let sprite[5] = 29148;
		let sprite[6] = 14588;
		let sprite[7] = 7676;
		let sprite[8] = 4028;
		let sprite[9] = 1820;
		let sprite[10] = 908;
		let sprite[11] = 18392;
		let sprite[12] = 12280;
		let sprite[13] = 8160;
		let sprite[14] = 0;
		let sprite[15] = 0;
		return;
	}
	
    method void loadSpriteSouthEast() {
		let sprite[0] = 0;
		let sprite[1] = 0;
		let sprite[2] = 8160;
		let sprite[3] = 12280;
		let sprite[4] = 18392;
		let sprite[5] = 908;
		let sprite[6] = 1820;
		let sprite[7] = 4028;
		let sprite[8] = 7676;
		let sprite[9] = 14588;
		let sprite[10] = 29148;
		let sprite[11] = 31628;
		let sprite[12] = 3844;
		let sprite[13] = 3592;
		let sprite[14] = 3088;
		let sprite[15] = 0;
		return;
	}
	
	method void loadSpriteSouthWest() {
		let sprite[0] = 0;
		let sprite[1] = 0;
		let sprite[2] = 2040;
		let sprite[3] = 8180;
		let sprite[4] = 7138;
		let sprite[5] = 12736;
		let sprite[6] = 14560;
		let sprite[7] = 15856;
		let sprite[8] = 16312;
		let sprite[9] = 16156;
		let sprite[10] = 15246;
		let sprite[11] = 12766;
		let sprite[12] = 8432;
		let sprite[13] = 4208;
		let sprite[14] = 2096;
		let sprite[15] = 0;
		return;
	}
	
    method void loadSpriteNorthWest() {
		let sprite[0] = 0;
		let sprite[1] = 2096;
		let sprite[2] = 4208;
		let sprite[3] = 8432;
		let sprite[4] = 12766;
		let sprite[5] = 15246;
		let sprite[6] = 16156;
		let sprite[7] = 16312;
		let sprite[8] = 15856;
		let sprite[9] = 14560;
		let sprite[10] = 12736;
		let sprite[11] = 7138;
		let sprite[12] = 8180;
		let sprite[13] = 2040;
		let sprite[14] = 0;
		let sprite[15] = 0;
		return;
	}
	
	method void loadSprite() {
		if (orientation = 0) { do loadSpriteNorth(); } 
		else { if (orientation = 1) { do loadSpriteNorthEast(); } 
		else { if (orientation = 2) { do loadSpriteEast(); } 
		else { if (orientation = 3) { do loadSpriteSouthEast(); }
		else { if (orientation = 4) { do loadSpriteSouth(); } 
		else { if (orientation = 5) { do loadSpriteSouthWest(); } 
		else { if (orientation = 6) { do loadSpriteWest(); } 
		else { if (orientation = 7) { do loadSpriteNorthWest(); }}}}}}}}
		return;
	}
	
/**
Change orientation clockwise.
*/	
	
	method void turnRight() {
		if (orientation = 7) {
			let orientation = 0;
		}
		else {
			let orientation = orientation + 1;
		}
		do loadSprite();
		return;
	}
	
/**
Change orientation counter-clockwise.
*/	

	method void turnLeft() {
		if (orientation = 0) {
			let orientation = 7;
		}
		else {
			let orientation = orientation - 1;
		}
		do loadSprite();
		return;
	}
		
/**
Returns fly's sprite's centre x position.
*/	

	method int getX() {
		return (x + (spriteSize / 2));
	}

/**
Returns fly's sprite's centre y position.
*/	

	method int getY() {
		return (y + (spriteSize / 2));
	}

/**
Accelerate in direction of orientation.
vx and vy are the velocity vector.
*/	

	method void accelerate() {
		var int dx;
		var int dy;
		if (orientation = 0) { let dy = -1; } 
		else { if (orientation = 1) { let dy = -1; let dx = 1; } 
		else { if (orientation = 2) { let dx = 1; } 
		else { if (orientation = 3) { let dy = 1; let dx = 1; }
		else { if (orientation = 4) { let dy = 1; } 
		else { if (orientation = 5) { let dy = 1; let dx = -1; } 
		else { if (orientation = 6) { let dx = -1; } 
		else { if (orientation = 7) { let dy = -1; let dx = -1; }}}}}}}}
		if (MathEx.abs(vx + dx) < maxSpeed) {
			let vx = vx + dx;
		}
		if (MathEx.abs(vy + dy) < maxSpeed) {
			let vy = vy + dy;
		}
		return;
	}
	
/**
Causes fly to enter stopped state.
This is when the ball consumes the fly.
Velicity is set to 0 here.
*/	

	method void stop() {
		let vx = 0;
		let vy = 0;
		let stopped = true;
		return;
	}
	
/**
Causes fly to enter the "entered" state.
This is when the fly exited a landscape and entered new landscape.
Velocity is decreased to 1.
*/	

	method void enter() {
		let exited = false;
		if (~(vx = 0)) {
			let vx = vx / MathEx.abs(vx);
		}
		if (~(vy = 0)) {
			let vy = vy / MathEx.abs(vy);
		}
		return;
	}

/**
Getter for exited, used by game.
*/
	
	method boolean getExited() {
		return exited;
	}

/**
Getter for stopped, used by game.
*/

	method boolean getStopped() {
		return stopped;
	}
	
/**
Move the fly towards its orientation by its velocity vecrtor.
This also checks if fly exited the landscape (exited = true).
*/	

	method void move() {
		var int nx;
		var int ny;
		
		let nx = x + vx;
		let ny = y + vy;
		
		if (nx < minBoundaryX) {
			do eraseCurrentFrame();
			let nx = maxBoundaryX - spriteSize;
			let exited = true;
		}
		else {
			if (ny < minBoundaryY) {
				do eraseCurrentFrame();
				let ny = maxBoundaryY - spriteSize;
				let exited = true;
			}
			else {
				if ((nx + spriteSize) > maxBoundaryX) {
					do eraseCurrentFrame();
					let nx = minBoundaryX;
					let exited = true;
				}
				else {
					if ((ny + spriteSize) > maxBoundaryY) {
						do eraseCurrentFrame();
						let ny = minBoundaryY;
						let exited = true;
					}
				}
			}
		}

		let x = nx;
		let y = ny;

		return;
	}
	
/**
Draws a white rectangle into current image of the fly thereby erasing it.
*/	

	method void eraseCurrentFrame() {
		do Screen.setColor(false);
		do Screen.drawRectangle(x, y, x + spriteSize, y + spriteSize);
		return;
	}

/**
Draws a white rectangle into location where fly used to be thereby erasing the old frame.
*/	

	method void erasePreviousFrame() {
		do Screen.setColor(false);
		if (vx > 0) {
			do Screen.drawRectangle(Math.max(minBoundaryX, x - vx), y, x, Math.min(maxBoundaryY, y + spriteSize));
		}
		if (vx < 0) {
			do Screen.drawRectangle(Math.min(maxBoundaryX, x + spriteSize), y, Math.min(maxBoundaryX, x + spriteSize - vx), Math.min(maxBoundaryY, y + spriteSize));
		}
		if (vy > 0) {
			do Screen.drawRectangle(Math.max(minBoundaryX, x - spriteSize), Math.max(minBoundaryY, y - vy), Math.min(maxBoundaryX, x + spriteSize + spriteSize), y);
		}
		if (vy < 0) {
			do Screen.drawRectangle(Math.max(minBoundaryX, x - spriteSize), Math.min(maxBoundaryY, y + spriteSize), Math.min(maxBoundaryX, x + spriteSize + spriteSize), Math.min(maxBoundaryY, y + spriteSize - vy));
		}
		return;
	}
	
/**
Draws the fly.
sprite has the currently loaded version of sprinte (north, east, etc).
sprite is shifted to the desired position in scr memory via poke.
*/	

	method void drawFrame() {
		var int a1;
		var int a2;
		var int i;
		var int j;
		
		// Draw new frame
		let a1 = scr + (x / 16) + (y * 32);
		let a2 = scr + (x / 16) + (y * 32) + 1;
		
		let i = 0;
		while (i < spriteSize) {
			let j = i * 32;
	
			do Memory.poke(a1 + j, MathEx.lsh(sprite[i], MathEx.mod(x, 16)));
			do Memory.poke(a2 + j, MathEx.rsh(sprite[i], 16 - MathEx.mod(x, 16)));

			let i = i + 1;
		}
	    return;
	}
	
/**
Erase old, draw new frame.
Called by game.
*/
	
	method void draw() {
		if (~stopped) {
			do erasePreviousFrame();
			do drawFrame();
		}
	    return;
	}
}