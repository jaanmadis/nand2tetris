/**
Ball class representing the hole that fly can drop into.
*/
class Ball {
	field int x;
	field int y;
	field int r;
	field int rFinal;
	field int stopRange;
	field boolean growing;
	field boolean stopped;

/**
Constructor.
Random dimension and position.
*/
	constructor Ball new() {
		let r = LCGRandom.randRange(5, 35);
		let rFinal = r + 32;
		let x = LCGRandom.randRange(rFinal, 511 - rFinal);
		let y = LCGRandom.randRange(rFinal, 220 - rFinal);
		let stopRange = 10 + (r / 2);
		let growing = false;
		let stopped = false;
		return this;
	}
	
    method void dispose() {
		do Memory.deAlloc(this);
        return;
    }
	
/**
Check if the distance from the ball's surface to fly is less than stopRange.
If yes, then stop the fly and start growing.
*/

	method void affect(Fly fly) {
		var int d;
		var int dx;
		var int dy;
		let d = r + stopRange + 1;
		let dx = MathEx.abs(x - fly.getX());
		let dy = MathEx.abs(y - fly.getY());
		// Protect against overflows. Calculate the distance.
		if ((dx < 100) & (dy < 100)) {
			let d = Math.sqrt((dx * dx) + (dy * dy));
		}
		if ((d - r) < stopRange) {
			do fly.stop();
			let growing = true;
		}
		return;
	}
	
/**
Getter. Used by game.
*/

	method boolean getStopped() {
		return stopped; 
	}
	
/**
Draw the ball.
If growing, then draw the ball larger each time draw is called.
stopped when stopped growing.
*/	
	
	method void draw() {
		do Screen.setColor(true);
		if (growing) {
			let r = r + 8;
			let growing = rFinal > r;
			let stopped = ~growing;
		}
		do Screen.drawCircle(x, y, r);
		return;
	}
}
