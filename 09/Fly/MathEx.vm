function MathEx.lsh 0
label WHILE_EXP0
push argument 1
push constant 0
gt
not
if-goto WHILE_END0
push argument 0
push constant 2
call Math.multiply 2
pop argument 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function MathEx.rsh 0
label WHILE_EXP0
push argument 1
push constant 0
gt
not
if-goto WHILE_END0
push argument 0
push constant 2
call Math.divide 2
pop argument 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function MathEx.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
push argument 0
call Math.multiply 2
pop argument 0
label IF_FALSE0
push argument 0
return
function MathEx.exp 2
push constant 1
pop local 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 1
lt
not
if-goto WHILE_END0
push local 1
push argument 0
call Math.multiply 2
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function MathEx.mod 0
label WHILE_EXP0
push argument 0
push argument 1
gt
push argument 0
push argument 1
eq
or
not
if-goto WHILE_END0
push argument 0
push argument 1
sub
pop argument 0
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
